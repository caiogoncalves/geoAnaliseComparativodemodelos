r2_SARk <- 1 - (SARk_SSE/SST)
mynb <- poly2nb(poligonos)
mylistw <- nb2listw(mynb,style="W")
# "lagsarlm" is the function that implements SAR Lag model in R
sar.ap <- lagsarlm(x ~ y,data=dataframe, mylistw,method="Matrix")
residuos <- numeric()
previstos <- numeric()
ParW <- numeric()
ParIntercepto <- numeric()
ParEnergia <- numeric()
r2_local <- numeric()
# considera a vizinhan?a de 1a ordem para a cria??o da lista de vizinhos
mynb <- poly2nb(poligonos)
# seleciona e ordena os ?ndices dos pol?gonos vizinhos de i
vizinhos_i <- sort(c(i,mynb[[i]]))
{
if (i == 419) {
residuos[i] <- 0
r2_local[i] <- 1
next
}
# seleciona e ordena os ?ndices dos pol?gonos vizinhos de i
vizinhos_i <- sort(c(i,mynb[[i]]))
# seleciona o slot "polygons" (lista de pol?gonos) dos vizinhos de i
listapoly_vizinhos_i <- slot(poligonos,"polygons")
poligonos_i <- subset(listapoly_vizinhos_i, ap[,1] %in% vizinhos_i)
# converte apenas i e seus vizinhos para o objeto SpatialPolygons
sp_i <- SpatialPolygons(poligonos_i)
# cria os objetos nb e listw apenas para i e seus vizinhos
mynb_i <- poly2nb(sp_i)
mylistw_i <- nb2listw(mynb_i,style="W",zero.policy=TRUE)
ap_i <- ap[vizinhos_i,]
# calculate global residual SS of local sample
sum_square_glo_i <- sum((ap_i$Income - mean(ap_i$Income))^2)
sar.ap_i <- lagsarlm(Income ~ Energy,data=ap_i,mylistw_i,
method="Matrix",zero.policy=TRUE)
residuos[i] <- sar.ap_i$residuals[ap_i$ID==i]
previstos[i] <- sar.ap_i$fitted.values[ap_i$ID==i]
ParW[i] <- sar.ap_i$rho
ParIntercepto[i] <- sar.ap_i$coefficients[1]
ParEnergia[i] <- sar.ap_i$coefficients[2]
r2_local[i] <- 1 - (sar.ap_i$SSE/sum_square_glo_i)
print(i)
}
for (i in 1:length(df_shp$INDICE95))
for (i in 1:length(df_shp$INDICE95)){
# seleciona e ordena os ?ndices dos pol?gonos vizinhos de i
vizinhos_i <- sort(c(i,mynb[[i]]))
# seleciona o slot "polygons" (lista de pol?gonos) dos vizinhos de i
listapoly_vizinhos_i <- slot(poligonos,"polygons")
poligonos_i <- subset(listapoly_vizinhos_i, ap[,1] %in% vizinhos_i)
# converte apenas i e seus vizinhos para o objeto SpatialPolygons
sp_i <- SpatialPolygons(poligonos_i)
# cria os objetos nb e listw apenas para i e seus vizinhos
mynb_i <- poly2nb(sp_i)
mylistw_i <- nb2listw(mynb_i,style="W",zero.policy=TRUE)
ap_i <- ap[vizinhos_i,]
# calculate global residual SS of local sample
sum_square_glo_i <- sum((ap_i$Income - mean(ap_i$Income))^2)
sar.ap_i <- lagsarlm(Income ~ Energy,data=ap_i,mylistw_i,
method="Matrix",zero.policy=TRUE)
residuos[i] <- sar.ap_i$residuals[ap_i$ID==i]
previstos[i] <- sar.ap_i$fitted.values[ap_i$ID==i]
ParW[i] <- sar.ap_i$rho
ParIntercepto[i] <- sar.ap_i$coefficients[1]
ParEnergia[i] <- sar.ap_i$coefficients[2]
r2_local[i] <- 1 - (sar.ap_i$SSE/sum_square_glo_i)
print(i)
}
poligonos_i <- subset(listapoly_vizinhos_i, df_shp$INDICE95 %in% vizinhos_i)
for (i in 1:length(df_shp$INDICE95)){
# seleciona e ordena os ?ndices dos pol?gonos vizinhos de i
vizinhos_i <- sort(c(i,mynb[[i]]))
# seleciona o slot "polygons" (lista de pol?gonos) dos vizinhos de i
listapoly_vizinhos_i <- slot(poligonos,"polygons")
poligonos_i <- subset(listapoly_vizinhos_i, df_shp$INDICE95 %in% vizinhos_i)
# converte apenas i e seus vizinhos para o objeto SpatialPolygons
sp_i <- SpatialPolygons(poligonos_i)
# cria os objetos nb e listw apenas para i e seus vizinhos
mynb_i <- poly2nb(sp_i)
mylistw_i <- nb2listw(mynb_i,style="W",zero.policy=TRUE)
ap_i <- ap[vizinhos_i,]
# calculate global residual SS of local sample
sum_square_glo_i <- sum((ap_i$Income - mean(ap_i$Income))^2)
sar.ap_i <- lagsarlm(Income ~ Energy,data=ap_i,mylistw_i,
method="Matrix",zero.policy=TRUE)
residuos[i] <- sar.ap_i$residuals[ap_i$ID==i]
previstos[i] <- sar.ap_i$fitted.values[ap_i$ID==i]
ParW[i] <- sar.ap_i$rho
ParIntercepto[i] <- sar.ap_i$coefficients[1]
ParEnergia[i] <- sar.ap_i$coefficients[2]
r2_local[i] <- 1 - (sar.ap_i$SSE/sum_square_glo_i)
print(i)
}
# seleciona e ordena os ?ndices dos pol?gonos vizinhos de i
vizinhos_i <- sort(c(i,mynb[[i]]))
# seleciona o slot "polygons" (lista de pol?gonos) dos vizinhos de i
listapoly_vizinhos_i <- slot(poligonos,"polygons")
poligonos_i <- subset(listapoly_vizinhos_i, df_shp$INDICE95 %in% vizinhos_i)
poligonos_i
# converte apenas i e seus vizinhos para o objeto SpatialPolygons
sp_i <- SpatialPolygons(poligonos_i)
sp_i
listapoly_vizinhos_i
slot(poligonos,"polygons")
# seleciona o slot "polygons" (lista de pol?gonos) dos vizinhos de i
listapoly_vizinhos_i <- slot(poligonos,"polygons")
vizinhos_i
for (i in 1:length(df_shp$INDICE95)){
# seleciona e ordena os ?ndices dos pol?gonos vizinhos de i
vizinhos_i <- sort(c(i,mynb[[i]]))
# seleciona o slot "polygons" (lista de pol?gonos) dos vizinhos de i
listapoly_vizinhos_i <- slot(poligonos,"polygons")
poligonos_i <- subset(listapoly_vizinhos_i, df_shp$INDICE95 %in% vizinhos_i)
# converte apenas i e seus vizinhos para o objeto SpatialPolygons
sp_i <- SpatialPolygons(poligonos_i)
# cria os objetos nb e listw apenas para i e seus vizinhos
mynb_i <- poly2nb(sp_i)
mylistw_i <- nb2listw(mynb_i,style="W",zero.policy=TRUE)
ap_i <- ap[vizinhos_i,]
# calculate global residual SS of local sample
sum_square_glo_i <- sum((ap_i$Income - mean(ap_i$Income))^2)
sar.ap_i <- lagsarlm(Income ~ Energy,data=ap_i,mylistw_i,
method="Matrix",zero.policy=TRUE)
residuos[i] <- sar.ap_i$residuals[ap_i$ID==i]
previstos[i] <- sar.ap_i$fitted.values[ap_i$ID==i]
ParW[i] <- sar.ap_i$rho
ParIntercepto[i] <- sar.ap_i$coefficients[1]
ParEnergia[i] <- sar.ap_i$coefficients[2]
r2_local[i] <- 1 - (sar.ap_i$SSE/sum_square_glo_i)
print(i)
}
i
# seleciona e ordena os ?ndices dos pol?gonos vizinhos de i
vizinhos_i <- sort(c(i,mynb[[i]]))
vizinhos_i
# seleciona o slot "polygons" (lista de pol?gonos) dos vizinhos de i
listapoly_vizinhos_i <- slot(poligonos,"polygons")
poligonos_i <- subset(listapoly_vizinhos_i, df_shp$INDICE95 %in% vizinhos_i)
poligonos_i
df_shp$INDICE95 %in% vizinhos_i
poligonos_i <- subset(listapoly_vizinhos_i, df_shp$CODMUNI %in% vizinhos_i)
poligonos_i
# converte apenas i e seus vizinhos para o objeto SpatialPolygons
sp_i <- SpatialPolygons(poligonos_i)
# cria os objetos nb e listw apenas para i e seus vizinhos
mynb_i <- poly2nb(sp_i)
# converte apenas i e seus vizinhos para o objeto SpatialPolygons
sp_i <- SpatialPolygons(poligonos_i)
sp_i
# cria os objetos nb e listw apenas para i e seus vizinhos
mynb_i <- poly2nb(sp_i)
poly2nb(sp_i)
sp_i
mylistw_i <- nb2listw(mynb_i,style="W",zero.policy=TRUE)
# cria os objetos nb e listw apenas para i e seus vizinhos
mynb_i <- poly2nb(sp_i)
# store RSS and R2 of the SAR lag model
SAR_SSE <- sar.ap$SSE
r2_SAR <- 1 - (SAR_SSE/SST)
r2_SAR
df_rquadrado_gw <- plyr::rbind.fill(df_rquadrado_gw, data.frame(nomes = nome_col, r2_GWR = r2_GWR, r2_SARk = r2_SARk, r2_SAR = r2_SAR))
View(df_rquadrado_gw)
nomes
nomes[-4]
nomes[4]
nomes[13]
nome <- nomes[13]
dataframe <- data.frame(x = df_shp$INDICE95, y = df_shp[, nome])
bwGauss <- gwr.sel(x ~ y, data=dataframe, coords=coords, adapt=TRUE, method="aic",
gweight=gwr.Gauss, verbose=FALSE)
gwr.ap <- gwr(x ~ y,data=dataframe,coords=coords,bandwidth=bwGauss,
gweight=gwr.Gauss,adapt=bwGauss,hatmatrix=TRUE)
GWR_SSE <- gwr.ap$results$rss
r2_GWR <- 1 - (GWR_SSE/SST)
nome_col <- nome
kGauss <- round(bwGauss * length(df_shp$INDICE95))
myknn <- knearneigh(coords,k=kGauss,longlat=FALSE,RANN=FALSE)
mynb <- knn2nb(myknn,sym=TRUE)
mylistw <- nb2listw(mynb,style="W")
sar.ap <- lagsarlm(x ~ y,data=dataframe , mylistw, method="Matrix")
SARk_SSE <- sar.ap$SSE
r2_SARk <- 1 - (SARk_SSE/SST)
mynb <- poly2nb(poligonos)
mylistw <- nb2listw(mynb,style="W")
# "lagsarlm" is the function that implements SAR Lag model in R
sar.ap <- lagsarlm(x ~ y,data=dataframe, mylistw,method="Matrix")
# store RSS and R2 of the SAR lag model
SAR_SSE <- sar.ap$SSE
r2_SAR <- 1 - (SAR_SSE/SST)
r2_SAR
df_rquadrado_gw <- data.frame()
df_rquadrado_gw <- plyr::rbind.fill(df_rquadrado_gw, data.frame(nomes = nome_col, r2_GWR = r2_GWR, r2_SARk = r2_SARk, r2_SAR = r2_SAR))
df_rquadrado_gw
nome
nome <- nomes[13]
nome
nome <- nomes[14]
nome
dataframe <- data.frame(x = df_shp$INDICE95, y = df_shp[, nome])
bwGauss <- gwr.sel(x ~ y, data=dataframe, coords=coords, adapt=TRUE, method="aic",
gweight=gwr.Gauss, verbose=FALSE)
gwr.ap <- gwr(x ~ y,data=dataframe,coords=coords,bandwidth=bwGauss,
gweight=gwr.Gauss,adapt=bwGauss,hatmatrix=TRUE)
GWR_SSE <- gwr.ap$results$rss
r2_GWR <- 1 - (GWR_SSE/SST)
nome_col <- nome
kGauss <- round(bwGauss * length(df_shp$INDICE95))
myknn <- knearneigh(coords,k=kGauss,longlat=FALSE,RANN=FALSE)
mynb <- knn2nb(myknn,sym=TRUE)
mylistw <- nb2listw(mynb,style="W")
sar.ap <- lagsarlm(x ~ y,data=dataframe , mylistw, method="Matrix")
SARk_SSE <- sar.ap$SSE
r2_SARk <- 1 - (SARk_SSE/SST)
mynb <- poly2nb(poligonos)
mylistw <- nb2listw(mynb,style="W")
# "lagsarlm" is the function that implements SAR Lag model in R
sar.ap <- lagsarlm(x ~ y,data=dataframe, mylistw,method="Matrix")
# store RSS and R2 of the SAR lag model
SAR_SSE <- sar.ap$SSE
r2_SAR <- 1 - (SAR_SSE/SST)
r2_SAR
residuos <- numeric()
previstos <- numeric()
ParW <- numeric()
ParIntercepto <- numeric()
ParEnergia <- numeric()
r2_local <- numeric()
# # considera a vizinhan?a de 1a ordem para a cria??o da lista de vizinhos
# mynb <- poly2nb(poligonos)
# for (i in 1:length(df_shp$INDICE95)){
#   {
#     if (i == 419) {
#       residuos[i] <- 0
#       r2_local[i] <- 1
#       next
#     }
#
#   # seleciona e ordena os ?ndices dos pol?gonos vizinhos de i
#   vizinhos_i <- sort(c(i,mynb[[i]]))
#
#   # seleciona o slot "polygons" (lista de pol?gonos) dos vizinhos de i
#   listapoly_vizinhos_i <- slot(poligonos,"polygons")
#   poligonos_i <- subset(listapoly_vizinhos_i, df_shp$CODMUNI %in% vizinhos_i)
#
#   # converte apenas i e seus vizinhos para o objeto SpatialPolygons
#   sp_i <- SpatialPolygons(poligonos_i)
#
#   # cria os objetos nb e listw apenas para i e seus vizinhos
#   mynb_i <- poly2nb(sp_i)
#   mylistw_i <- nb2listw(mynb_i,style="W",zero.policy=TRUE)
#
#   ap_i <- ap[vizinhos_i,]
#
#   # calculate global residual SS of local sample
#   sum_square_glo_i <- sum((ap_i$Income - mean(ap_i$Income))^2)
#
#   sar.ap_i <- lagsarlm(Income ~ Energy,data=ap_i,mylistw_i,
#                        method="Matrix",zero.policy=TRUE)
#
#   residuos[i] <- sar.ap_i$residuals[ap_i$ID==i]
#   previstos[i] <- sar.ap_i$fitted.values[ap_i$ID==i]
#   ParW[i] <- sar.ap_i$rho
#   ParIntercepto[i] <- sar.ap_i$coefficients[1]
#   ParEnergia[i] <- sar.ap_i$coefficients[2]
#   r2_local[i] <- 1 - (sar.ap_i$SSE/sum_square_glo_i)
#   print(i)
# }
#
# # calculate R2 of the global model
# GWRSAR_SSE <- sum(residuos^2)
# r2_GWRSAR <- 1 - (GWRSAR_SSE/SST)
# r2_GWRSAR
df_rquadrado_gw <- plyr::rbind.fill(df_rquadrado_gw, data.frame(nomes = nome_col, r2_GWR = r2_GWR, r2_SARk = r2_SARk, r2_SAR = r2_SAR))
df_rquadrado_gw
# "lagsarlm" is the function that implements SAR Lag model in R
sar.ap <- lagsarlm(x ~ y,data=dataframe, mylistw,method="SE_classic")
# store RSS and R2 of the SAR lag model
SAR_SSE <- sar.ap$SSE
r2_SAR <- 1 - (SAR_SSE/SST)
r2_SAR
# "lagsarlm" is the function that implements SAR Lag model in R
sar.ap <- lagsarlm(x ~ y,data=dataframe, mylistw,method="MC")
# store RSS and R2 of the SAR lag model
SAR_SSE <- sar.ap$SSE
r2_SAR <- 1 - (SAR_SSE/SST)
r2_SAR
# "lagsarlm" is the function that implements SAR Lag model in R
sar.ap <- lagsarlm(x ~ y,data=dataframe, mylistw)
# store RSS and R2 of the SAR lag model
SAR_SSE <- sar.ap$SSE
r2_SAR <- 1 - (SAR_SSE/SST)
r2_SAR
"0.3531"
# "lagsarlm" is the function that implements SAR Lag model in R
sar.ap <- lagsarlm(x ~ y,data=dataframe, mylistw, method="Matrix_J")
# store RSS and R2 of the SAR lag model
SAR_SSE <- sar.ap$SSE
r2_SAR <- 1 - (SAR_SSE/SST)
r2_SAR
# "lagsarlm" is the function that implements SAR Lag model in R
sar.ap <- lagsarlm(x ~ y,data=dataframe, mylistw, method="moments")
# "lagsarlm" is the function that implements SAR Lag model in R
sar.ap <- lagsarlm(x ~ y,data=dataframe, mylistw, method="SE_whichMin")
# store RSS and R2 of the SAR lag model
SAR_SSE <- sar.ap$SSE
r2_SAR <- 1 - (SAR_SSE/SST)
r2_SAR
# "lagsarlm" is the function that implements SAR Lag model in R
sar.ap <- lagsarlm(x ~ y,data=dataframe, mylistw, method="Matrix")
# store RSS and R2 of the SAR lag model
SAR_SSE <- sar.ap$SSE
r2_SAR <- 1 - (SAR_SSE/SST)
r2_SAR
df_rquadrado_gw
GWR_SSE
summary(gwr.ap)
gwr.ap$results
gwr.ap$lm
gwr.ap$lm$qr$qr
gwr.ap$results$rss
gwr.ap$results$v1
gwr.ap$results
r2_GWR
gwr.ap$bandwidth
summary(gwr.ap)
summary(gwr.ap$lm)
gwr.ap$SDF$sum.w
gwr.ap$SDF$y
gwr.ap$SDF$y_se
gwr.ap$SDF$gwr.e
gwr.ap$SDF$gwr.e
gwr.ap$SDF$pred
gwr.ap$lhat
View(gwr.ap)
gwr
gwr.ap
plot(gwr.ap)
names(df_shp)
df_shp1 <- df_shp[,c("AREA" ,"INDICE95","GINI_91","POP_94","POP_RUR","POP_URB"
,"POP_FEM", "POP_MAS", "POP_TOT", "URBLEVEL", "PIB_PC")]
lm.shp <- lm(INDICE95 ~ ., data = df_shp1)
lm.shp
lm.shp <- step(lm(INDICE95 ~ ., data = df_shp1))
lm.shp <- step(lm(INDICE95 ~ AREA + GINI_91 + POP_RUR + POP_URB + POP_FEM + URBLEVEL +
PIB_PC, data = df_shp1))
sar.ap <- step(lagsarlm(INDICE95 ~ ., data = df_shp1, mylistw, method="Matrix"))
sar.ap <- lagsarlm(INDICE95 ~ ., data = df_shp1, mylistw, method="Matrix")
View(df_shp1)
View(df_shp1)
df_shp1[is.na(df_shp1)]
df_shp1[is.na(df_shp1),]
sar.ap <- lagsarlm(x ~ y,data=dataframe , mylistw, method="Matrix")
sar.ap <- lagsarlm(INDICE95 ~ ., data = df_shp1, mylistw, method="Matrix")
sar.ap <- lagsarlm(INDICE95 ~ AREA + GINI_91 + POP_RUR + POP_URB + POP_FEM + URBLEVEL +
PIB_PC., data = df_shp1, mylistw, method="Matrix")
sar.ap <- lagsarlm(INDICE95 ~ AREA + GINI_91 + POP_RUR + POP_URB + POP_FEM + URBLEVEL +
PIB_PC, data = df_shp1, mylistw, method="Matrix")
gwr.ap <- gwr(INDICE95 ~ AREA + GINI_91 + POP_RUR + POP_URB + POP_FEM + URBLEVEL +
PIB_PC, data = df_shp1,coords=coords,bandwidth=bwGauss,
gweight=gwr.Gauss,adapt=bwGauss,hatmatrix=TRUE)
gwr.ap
sar.ap <- lagsarlm(INDICE95 ~ AREA + GINI_91 + POP_RUR + POP_URB + POP_FEM + URBLEVEL +
PIB_PC, data = df_shp1, mylistw)
sar.ap
SAR_SSE <- sar.ap$SSE
r2_SAR <- 1 - (SAR_SSE/SST)
r2_SAR
df_shp <- df_shp[,c("AREA" ,"INDICE95","GINI_91","POP_94","POP_RUR","POP_URB"
,"POP_FEM", "POP_MAS", "POP_TOT", "URBLEVEL", "PIB_PC")]
variavel_y <- "INDICE95"
nomes <- names(df_shp)
nomes[-variavel_y]
nomes[-c(variavel_y)]
nomes[c(variavel_y)]
nomes[grepl(variavel_y, nomes)]
nomes[!grepl(variavel_y, nomes)]
for (nome in nomes[!grepl(variavel_y, nomes)]) {
if (is.numeric(df_shp[,nome])){
hist(df_shp[,nome], xlab = nome, main = paste0("Histograma de ",nome))
}
}
df_rquadrado <- data.frame()
df_shp[,variavel_y]
source('~/MBA/geo/trabalho/trabalho4/trab4.R', encoding = 'UTF-8', echo=TRUE)
source('~/MBA/geo/trabalho/trabalho4/trab4.R', encoding = 'UTF-8', echo=TRUE)
list.of.packages <- c("maptools", "spgwr", "spdep", "progress")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(c("maptools", "spgwr", "spdep", "progress"))
library(list.of.packages)
library(c(list.of.packages))
library(c(maptools, spgwr))
library(c("maptools", "spgwr"))
library("maptools")
source('~/MBA/geo/trabalho/trabalho4/trab4.R', encoding = 'UTF-8', echo=TRUE)
source('~/MBA/geo/trabalho/trabalho4/trab4.R', encoding = 'UTF-8', echo=TRUE)
pb <- progress_bar$new(
format = "  downloading [:bar] :percent in :elapsed",
total = nrow(df_shp), clear = FALSE, width= 60)
pb$tick()
pb <- progress_bar$new(
format = "  Calculando [:bar] :percent in :elapsed",
total = nrow(df_shp), clear = FALSE, width= 60)
##### For para todas as variaveis
for (nome in nomes) {
pb$tick()
if (is.numeric(df_shp[,nome])){
dataframe <- data.frame(x = df_shp[,variavel_y], y = df_shp[, nome])
#####regressao linear####
lm.shp <- lm(x ~ y, data = dataframe)
###Saida regressao Linear
rquad <-  summary(lm.shp)$r.squared
###Criando o texto da funcao linear
funcao <- paste0("y = ",lm.shp$coefficients[1]," + ",lm.shp$coefficients[2])
####definicao do gauss
bwGauss <- gwr.sel(x ~ y, data=dataframe, coords=coords, adapt=TRUE, method="aic",
gweight=gwr.Gauss, verbose=FALSE)
#####regressao GWR
gwr.ap <- gwr(x ~ y,data=dataframe,coords=coords,bandwidth=bwGauss,
gweight=gwr.Gauss,adapt=bwGauss,hatmatrix=TRUE)
GWR_SSE <- gwr.ap$results$rss
##### R2 do gwr
r2_GWR <- 1 - (GWR_SSE/SST)
nome_col <- nome
kGauss <- round(bwGauss * length(df_shp[,variavel_y]))
myknn <- knearneigh(coords,k=kGauss,longlat=FALSE,RANN=FALSE)
mynb <- knn2nb(myknn,sym=TRUE)
mylistw <- nb2listw(mynb,style="W")
#### inicio do SARK
sarK.ap <- lagsarlm(x ~ y,data=dataframe , mylistw, method="Matrix")
SARk_SSE <- sarK.ap$SSE
#### r2 do sar
r2_SARk <- 1 - (SARk_SSE/SST)
mynb <- poly2nb(poligonos)
mylistw <- nb2listw(mynb,style="W")
### inicio do SAR
sar.ap <- lagsarlm(x ~ y,data=dataframe, mylistw, method="Matrix")
# r2 do SAR
SAR_SSE <- sar.ap$SSE
r2_SAR <- 1 - (SAR_SSE/SST)
r2_SAR
df_rquadrado_gw <- plyr::rbind.fill(df_rquadrado_gw, data.frame(nomes = nome_col,GWR = gwr.ap, r2_GWR = r2_GWR,SARk = sarK.ap, r2_SARk = r2_SARk,sar = sar.ap, r2_SAR = r2_SAR, r2_regLin = round(rquad, 4), func = funcao))
}
}
length(nomes)
for (nome in nomes) {
pb$tick()
}
source('~/MBA/geo/trabalho/trabalho4/trab4.R', encoding = 'UTF-8')
df_rquadrado_gw <- plyr::rbind.fill(df_rquadrado_gw, data.frame(nomes = nome_col,GWR = gwr.ap, r2_GWR = r2_GWR,SARk = sarK.ap, r2_SARk = r2_SARk,sar = sar.ap, r2_SAR = r2_SAR, r2_regLin = round(rquad, 4), func = funcao))
#####regressao GWR
gwr.ap <- gwr(x ~ y,data=dataframe,coords=coords,bandwidth=bwGauss,
gweight=gwr.Gauss,adapt=bwGauss,hatmatrix=TRUE)
list_nome <- nome_col
list("nome" = nome_col)
list(nome_col = list(GWR = gwr.ap, r2_GWR = r2_GWR))
nome_col
x <-  list(nome_col = list(GWR = gwr.ap, r2_GWR = r2_GWR))
list_all <-
df_rquadrado_gw <- plyr::rbind.fill(df_rquadrado_gw, data.frame(nomes = nome_col,GWR = list(gwr.ap))
, r2_GWR = r2_GWR,SARk = sarK.ap, r2_SARk = r2_SARk,sar = sar.ap, r2_SAR = r2_SAR, r2_regLin = round(rquad, 4), func = funcao))
list_all <-
df_rquadrado_gw <- plyr::rbind.fill(df_rquadrado_gw, data.frame(nomes = nome_col,GWR = list(gwr.ap)))
gwr.ap
summary(gwr.ap$results)
summary(gwr.ap$SDF)
summary(gwr.ap$SDF$localR2)
x <-  summary(gwr.ap$SDF$localR2)
x
list_all <-
df_rquadrado_gw <- plyr::rbind.fill(df_rquadrado_gw, data.frame(nomes = nome_col,GWR = summary(gwr.ap$SDF$localR2)
, r2_GWR = r2_GWR,SARk = sarK.ap,
r2_SARk = r2_SARk,sar = sar.ap, r2_SAR = r2_SAR,
r2_regLin = round(rquad, 4), func = funcao))
list_all <-
df_rquadrado_gw <- plyr::rbind.fill(df_rquadrado_gw, data.frame(nomes = nome_col,GWR = summary(gwr.ap$SDF$localR2)))
source('~/MBA/geo/trabalho/trabalho4/trab4.R', encoding = 'UTF-8')
source('~/MBA/geo/trabalho/trabalho4/trab4.R', encoding = 'UTF-8')
source('~/MBA/geo/trabalho/trabalho4/trab4.R', encoding = 'UTF-8')
list_all <-
df_rquadrado_gw <- plyr::rbind.fill(df_rquadrado_gw, data.frame(nomes = nome_col
, r2_GWR = r2_GWR,SARk = sarK.ap,
r2_SARk = r2_SARk, r2_SAR = r2_SAR,
r2_regLin = round(rquad, 4), func = funcao))
list_all <-
df_rquadrado_gw <- plyr::rbind.fill(df_rquadrado_gw, data.frame(nomes = nome_col
, r2_GWR = r2_GWR,
r2_SARk = r2_SARk,
r2_SAR = r2_SAR,
r2_regLin = round(rquad, 4), func = funcao))
print(paste0("Terminei o ", nome))
print(paste0("Os varoles abaixos sao os r2 do GWR do ",nome))
print(summary(gwr.ap$SDF$localR2))
source('~/MBA/geo/trabalho/trabalho4/trab4.R', encoding = 'UTF-8')
View(df_rquadrado_gw)
print(summary(gwr.ap$SDF$localR2))
gwr.ap$SDF
gwr.ap
summary(gwr.ap)
gwr.ap
summary(gwr.ap$SDF)
######################## EXERCICIO EXTRA ###################################################
lm.shp <- step(lm(INDICE95 ~ ., data = df_shp1))
######################## EXERCICIO EXTRA ###################################################
lm.shp <- step(lm(INDICE95 ~ ., data = df_shp))
lm.shp
names(df_shp)
lm.shp$model
names(lm.shp$model)
nomes <- names(lm.shp$model)
df_extra <- df_shp[,nomes]
